#ifndef _TRANSFORMATIONS_H_
#define _TRANSFORMATIONS_H_

#include <util/integer_range.h>

template<uint32_t n, uint32_t size, uint32_t... pairs>
struct group_transform_impl {

    constexpr group_transform_impl() : arr() {
        constexpr uint32_t _pairs[size] = { static_cast<uint32_t>(pairs)... };

        uint32_t ngroups                             = 0;
        uint32_t group_indexes[(size + (n - 1)) / n] = { 0 };

        for (uint32_t i = 0; i < size; i += 2) {
            const uint32_t x_i = _pairs[i];
            const uint32_t y_i = _pairs[i + 1];

            uint32_t idx = ngroups - 1;
            for (; idx != (-1); --idx) {
                uint32_t       j         = 0;
                const uint32_t group_idx = group_indexes[idx];
                for (; j < group_idx; j += 2) {
                    const uint32_t x_j = arr[n * idx + j];
                    const uint32_t y_j = arr[n * idx + j + 1];
                    if (x_i == x_j || x_i == y_j || y_i == x_j || y_i == y_j) {
                        break;
                    }
                }
                if (j != group_idx) {
                    break;
                }
            }
            if (++idx == ngroups) {
                ++ngroups;
            }
            const uint32_t ns_group_idx     = group_indexes[idx];
            arr[n * idx + ns_group_idx]     = x_i;
            arr[n * idx + ns_group_idx + 1] = y_i;
            group_indexes[idx] += 2;
        }
    }

    uint32_t arr[size];
};

template<uint32_t n, uint32_t size, uint32_t... pairs, uint32_t... seq>
constexpr decltype(auto)
group_transform_kernel(std::integer_sequence<uint32_t, pairs...> _pairs,
                       std::integer_sequence<uint32_t, seq...>   _seq) {

    constexpr group_transform_impl<n, size, pairs...> gt =
        group_transform_impl<n, size, pairs...>();
    return return_transform<gt.arr[seq]...>();
}


template<uint32_t n, uint32_t... pairs>
constexpr decltype(auto)
group_transform(std::integer_sequence<uint32_t, pairs...> _pairs) {
    constexpr uint32_t size = get_size<uint32_t>(_pairs);
    return group_transform_kernel<n, size>(
        _pairs,
        std::make_integer_sequence<uint32_t, size>{});
}


#endif
