#ifndef _INTEGER_RANGE_H_
#define _INTEGER_RANGE_H_

#include <stdint.h>
#include <array>
#include <utility>


// Taken from:
// https://stackoverflow.com/questions/20874388/error-spliting-an-stdindex-sequence
template<typename T, typename seq, T begin>
struct make_integer_range_impl;

template<typename T, T... v, T begin>
struct make_integer_range_impl<T, std::integer_sequence<T, v...>, begin> {
    using type = std::integer_sequence<T, begin + v...>;
};


template<typename T, T begin, T end>
using make_integer_range =
    typename make_integer_range_impl<T,
                                     std::make_integer_sequence<T, end - begin>,
                                     begin>::type;

template<typename T, T... v1, T... v2>
constexpr decltype(auto)
slice_impl(std::integer_sequence<T, v1...>, std::integer_sequence<T, v2...>) {
    using seq_array = std::array<T, sizeof...(v1)>;
    return std::index_sequence<std::get<v2>(seq_array{ { v1... } })...>();
}

template<typename T, T begin, T end, T... v>
constexpr decltype(auto)
slice(std::integer_sequence<T, v...> _idx_seq) {
    return slice_impl(_idx_seq, make_integer_range<T, begin, end>());
}

template<typename T, T point, T... v>
constexpr decltype(auto)
split(std::integer_sequence<T, v...> _idx_seq) {
    return slice<T, point, sizeof...(v)>(_idx_seq);
}

#endif
