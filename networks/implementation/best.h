#ifndef _BEST_NETWORK_H_
#define _BEST_NETWORK_H_


/*
 * Minimum Depth Known Sorting Networks For N = [4, 32]
 * Taken from:
 * http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
 */

#include <stdint.h>
#include <utility>

namespace vsort {
namespace network {
namespace internal {

template<uint32_t n>
struct best_network {
    // Default to Bitonic Sorting Network
    using network = typename network::internal::bitonic_network<n>::network;
};

/*
 * Sorting Network For N = 4, with Depth = 3
 */
template<>
struct best_network<4> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  2,  1,  3,  0,  1,  2,  3,
                                           1,  2
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 5, with Depth = 5
 */
template<>
struct best_network<5> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  3,  1,  4,  0,  2,  1,  3,
                                           0,  1,  2,  4,  1,  2,  3,  4,
                                           2,  3
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 6, with Depth = 5
 */
template<>
struct best_network<6> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  5,  1,  3,  2,  4,  1,  2,
                                           3,  4,  0,  3,  2,  5,  0,  1,
                                           2,  3,  4,  5,  1,  2,  3,  4
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 7, with Depth = 6
 */
template<>
struct best_network<7> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  6,  2,  3,  4,  5,  0,  2,
                                           1,  4,  3,  6,  0,  1,  2,  5,
                                           3,  4,  1,  2,  4,  6,  2,  3,
                                           4,  5,  1,  2,  3,  4,  5,  6
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 8, with Depth = 6
 */
template<>
struct best_network<8> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  2,  1,  3,  4,  6,  5,  7,
                                           0,  4,  1,  5,  2,  6,  3,  7,
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                           2,  4,  3,  5,  1,  4,  3,  6,
                                           1,  2,  3,  4,  5,  6
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 9, with Depth = 7
 */
template<>
struct best_network<9> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  3,  1,  7,  2,  5,  4,  8,
                                           0,  7,  2,  4,  3,  8,  5,  6,
                                           0,  2,  1,  3,  4,  5,  7,  8,
                                           1,  4,  3,  6,  5,  7,  0,  1,
                                           2,  4,  3,  5,  6,  8,  2,  3,
                                           4,  5,  6,  7,  1,  2,  3,  4,
                                           5,  6
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 10, with Depth = 7
 */
template<>
struct best_network<10> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  1,  2,  5,  3,  6,  4,  7,
                                           8,  9,  0,  6,  1,  8,  2,  4,
                                           3,  9,  5,  7,  0,  2,  1,  3,
                                           4,  5,  6,  8,  7,  9,  0,  1,
                                           2,  7,  3,  5,  4,  6,  8,  9,
                                           1,  2,  3,  4,  5,  6,  7,  8,
                                           1,  3,  2,  4,  5,  7,  6,  8,
                                           2,  3,  4,  5,  6,  7
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 11, with Depth = 8
 */
template<>
struct best_network<11> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  9,  1,  6,  2,  4,  3,  7,
                                           5,  8,  0,  1,  3,  5,  4, 10,
                                           6,  9,  7,  8,  1,  3,  2,  5,
                                           4,  7,  8, 10,  0,  4,  1,  2,
                                           3,  7,  5,  9,  6,  8,  0,  1,
                                           2,  6,  4,  5,  7,  8,  9, 10,
                                           2,  4,  3,  6,  5,  7,  8,  9,
                                           1,  2,  3,  4,  5,  6,  7,  8,
                                           2,  3,  4,  5,  6,  7
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 12, with Depth = 8
 */
template<>
struct best_network<12> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  8,  1,  7,  2,  6,  3, 11,
                                           4, 10,  5,  9,  0,  2,  1,  4,
                                           3,  5,  6,  8,  7, 10,  9, 11,
                                           0,  1,  2,  9,  4,  7,  5,  6,
                                          10, 11,  1,  3,  2,  7,  4,  9,
                                           8, 10,  0,  1,  2,  3,  4,  5,
                                           6,  7,  8,  9, 10, 11,  1,  2,
                                           3,  5,  6,  8,  9, 10,  2,  4,
                                           3,  6,  5,  8,  7,  9,  1,  2,
                                           3,  4,  5,  6,  7,  8,  9, 10
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 13, with Depth = 9
 */
template<>
struct best_network<13> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0, 11,  1,  7,  2,  4,  3,  5,
                                           8,  9, 10, 12,  0,  2,  3,  6,
                                           4, 12,  5,  7,  8, 10,  0,  8,
                                           1,  3,  2,  5,  4,  9,  6, 11,
                                           7, 12,  0,  1,  2, 10,  3,  8,
                                           4,  6,  9, 11,  1,  3,  2,  4,
                                           5, 10,  6,  8,  7,  9, 11, 12,
                                           1,  2,  3,  4,  5,  8,  6,  9,
                                           7, 10,  2,  3,  4,  7,  5,  6,
                                           8, 11,  9, 10,  4,  5,  6,  7,
                                           8,  9, 10, 11,  3,  4,  5,  6,
                                           7,  8,  9, 10
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 14, with Depth = 9
 */
template<>
struct best_network<14> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  3,  1,  9,  2,  6,  4, 12,
                                           5, 10,  7, 11,  8, 13,  0,  2,
                                           3, 12,  4,  5,  6, 10,  7,  8,
                                          11, 13,  0,  1,  2, 11,  3,  6,
                                           4,  7,  5,  9, 10, 12,  0,  4,
                                           1,  7,  2,  5,  3,  8,  6, 13,
                                           9, 11,  1,  2,  3,  4,  5,  7,
                                           6,  9,  8, 10, 12, 13,  1,  3,
                                           2,  4,  5,  9,  6, 10,  7,  8,
                                          11, 12,  2,  3,  4,  5,  6,  7,
                                           8, 11,  9, 10, 12, 13,  4,  6,
                                           5,  7,  8,  9, 10, 11,  3,  4,
                                           5,  6,  7,  8,  9, 10, 11, 12
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 15, with Depth = 9
 */
template<>
struct best_network<15> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  6,  1, 10,  2, 14,  3,  9,
                                           4, 12,  5, 13,  7, 11,  0,  7,
                                           2,  5,  3,  4,  6, 11,  8, 10,
                                           9, 12, 13, 14,  1, 13,  2,  3,
                                           4,  6,  5,  9,  7,  8, 10, 14,
                                          11, 12,  0,  3,  1,  4,  5,  7,
                                           6, 13,  8,  9, 10, 11, 12, 14,
                                           0,  2,  1,  5,  3,  8,  4,  6,
                                           7, 10,  9, 11, 12, 13,  0,  1,
                                           2,  5,  3, 10,  4,  8,  6,  7,
                                           9, 12, 11, 13,  1,  2,  3,  4,
                                           5,  6,  7,  9,  8, 10, 11, 12,
                                           3,  5,  4,  6,  7,  8,  9, 10,
                                           2,  3,  4,  5,  6,  7,  8,  9,
                                          10, 11
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 16, with Depth = 9
 */
template<>
struct best_network<16> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  5,  1,  4,  2, 12,  3, 13,
                                           6,  7,  8,  9, 10, 15, 11, 14,
                                           0,  2,  1, 10,  3,  6,  4,  7,
                                           5, 14,  8, 11,  9, 12, 13, 15,
                                           0,  8,  1,  3,  2, 11,  4, 13,
                                           5,  9,  6, 10,  7, 15, 12, 14,
                                           0,  1,  2,  4,  3,  8,  5,  6,
                                           7, 12,  9, 10, 11, 13, 14, 15,
                                           1,  3,  2,  5,  4,  8,  6,  9,
                                           7, 11, 10, 13, 12, 14,  1,  2,
                                           3,  5,  4, 11,  6,  8,  7,  9,
                                          10, 12, 13, 14,  2,  3,  4,  5,
                                           6,  7,  8,  9, 10, 11, 12, 13,
                                           4,  6,  5,  7,  8, 10,  9, 11,
                                           3,  4,  5,  6,  7,  8,  9, 10,
                                          11, 12
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 17, with Depth = 10
 */
template<>
struct best_network<17> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           1,  2,  3,  4,  5,  6,  7,  8,
                                           9, 10, 11, 12, 13, 14, 15, 16,
                                           1,  3,  2,  4,  5,  7,  6,  8,
                                           9, 11, 10, 12, 13, 15, 14, 16,
                                           1,  5,  2,  6,  3,  7,  4,  8,
                                           9, 13, 10, 14, 11, 15, 12, 16,
                                           0,  3,  1, 13,  2, 10,  4,  7,
                                           5, 11,  6, 12,  8,  9, 14, 15,
                                           0, 13,  1,  8,  2,  5,  3,  6,
                                           4, 14,  7, 15,  9, 16, 10, 11,
                                           0,  1,  2,  8,  3,  4,  5, 10,
                                           6, 13,  7, 11, 12, 14,  1,  5,
                                           3,  8,  4, 10,  6,  7,  9, 12,
                                          11, 13,  1,  2,  4,  6,  5,  8,
                                           7, 10,  9, 11, 12, 14, 13, 15,
                                           2,  3,  4,  5,  6,  8,  7,  9,
                                          10, 11, 12, 13, 14, 15,  3,  4,
                                           5,  6,  7,  8,  9, 10, 11, 12,
                                          13, 14, 15, 16
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 18, with Depth = 11
 */
template<>
struct best_network<18> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  6,  1, 10,  2, 15,  3,  5,
                                           4,  9,  7, 16,  8, 13, 11, 17,
                                          12, 14,  0, 12,  1,  4,  3, 11,
                                           5, 17,  6, 14,  7,  8,  9, 10,
                                          13, 16,  1, 13,  2,  7,  4, 16,
                                           6,  9,  8, 11, 10, 15,  0,  1,
                                           2,  3,  4, 12,  5, 13,  7,  9,
                                           8, 10, 14, 15, 16, 17,  0,  2,
                                           1, 11,  3,  4,  5,  7,  6, 16,
                                          10, 12, 13, 14, 15, 17,  1,  8,
                                           4, 10,  5,  6,  7, 13,  9, 16,
                                          11, 12,  1,  3,  2,  5,  4,  7,
                                           6,  8,  9, 11, 10, 13, 12, 15,
                                          14, 16,  1,  2,  3,  5,  4,  6,
                                           7,  9,  8, 10, 11, 13, 12, 14,
                                          15, 16,  2,  3,  5,  8,  6,  7,
                                           9, 12, 10, 11, 14, 15,  3,  4,
                                           5,  6,  7,  8,  9, 10, 11, 12,
                                          13, 14,  4,  5,  6,  7,  8,  9,
                                          10, 11, 12, 13
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 19, with Depth = 11
 */
template<>
struct best_network<19> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0, 12,  1, 13,  2, 14,  3, 15,
                                           4, 16,  5, 17,  6, 18,  8, 10,
                                           9, 11,  0,  2,  1,  3,  4,  6,
                                           5,  7,  8,  9, 10, 11, 12, 14,
                                          13, 15, 16, 18,  0,  1,  2,  3,
                                           4,  5,  6,  7, 12, 13, 14, 15,
                                          16, 17,  0,  4,  1, 12,  2, 16,
                                           3, 17,  5,  8,  6,  9,  7, 18,
                                          10, 13, 11, 14,  1,  6,  3, 10,
                                           4,  5,  7, 11,  8, 12,  9, 16,
                                          13, 18, 14, 15,  0,  4,  2,  8,
                                           3,  9,  6,  7, 10, 16, 11, 17,
                                          12, 13, 15, 18,  1,  4,  3,  6,
                                           5,  8,  7, 10,  9, 12, 11, 14,
                                          13, 16,  2,  3,  4,  5,  6,  8,
                                           7,  9, 10, 12, 11, 13, 14, 15,
                                          16, 17,  2,  4,  3,  6,  5,  7,
                                           8, 10,  9, 11, 12, 14, 13, 16,
                                          15, 17,  1,  2,  3,  5,  6,  7,
                                           8,  9, 10, 11, 12, 13, 14, 16,
                                          17, 18,  3,  4,  5,  6,  7,  8,
                                           9, 10, 11, 12, 13, 14, 15, 16
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 20, with Depth = 11
 */
template<>
struct best_network<20> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0, 12,  1, 13,  2, 14,  3, 15,
                                           4, 16,  5, 17,  6, 18,  7, 19,
                                           8, 10,  9, 11,  0,  2,  1,  3,
                                           4,  6,  5,  7,  8,  9, 10, 11,
                                          12, 14, 13, 15, 16, 18, 17, 19,
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                          12, 13, 14, 15, 16, 17, 18, 19,
                                           0,  4,  1, 12,  2, 16,  3, 17,
                                           5,  8,  6,  9,  7, 18, 10, 13,
                                          11, 14, 15, 19,  1,  6,  3, 10,
                                           4,  5,  7, 11,  8, 12,  9, 16,
                                          13, 18, 14, 15,  0,  4,  2,  8,
                                           3,  9,  6,  7, 10, 16, 11, 17,
                                          12, 13, 15, 19,  1,  4,  3,  6,
                                           5,  8,  7, 10,  9, 12, 11, 14,
                                          13, 16, 15, 18,  2,  3,  4,  5,
                                           6,  8,  7,  9, 10, 12, 11, 13,
                                          14, 15, 16, 17,  2,  4,  3,  6,
                                           5,  7,  8, 10,  9, 11, 12, 14,
                                          13, 16, 15, 17,  1,  2,  3,  5,
                                           6,  7,  8,  9, 10, 11, 12, 13,
                                          14, 16, 17, 18,  3,  4,  5,  6,
                                           7,  8,  9, 10, 11, 12, 13, 14,
                                          15, 16
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 21, with Depth = 12
 */
template<>
struct best_network<21> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  7,  1, 10,  3,  5,  4,  8,
                                           6, 13,  9, 19, 11, 14, 12, 17,
                                          15, 16, 18, 20,  0, 11,  1, 15,
                                           2, 12,  3,  4,  5,  8,  6,  9,
                                           7, 14, 10, 16, 13, 19, 17, 20,
                                           0,  6,  1,  3,  2, 18,  4, 15,
                                           5, 10,  8, 16, 11, 17, 12, 13,
                                          14, 20,  2,  6,  5, 12,  7, 18,
                                           8, 14,  9, 11, 10, 17, 13, 19,
                                          16, 20,  1,  2,  4,  7,  5,  9,
                                           6, 17, 10, 13, 11, 12, 14, 19,
                                          15, 18,  0,  2,  3,  6,  4,  5,
                                           7, 10,  8, 11,  9, 15, 12, 16,
                                          13, 18, 14, 17, 19, 20,  0,  1,
                                           2,  3,  5,  9,  6, 12,  7,  8,
                                          11, 14, 13, 15, 16, 19, 17, 18,
                                           1,  2,  3,  9,  6, 13, 10, 11,
                                          12, 15, 16, 17, 18, 19,  1,  4,
                                           2,  5,  3,  7,  6, 10,  8,  9,
                                          11, 12, 13, 14, 17, 18,  2,  4,
                                           5,  6,  7,  8,  9, 11, 10, 13,
                                          12, 15, 14, 16,  3,  4,  5,  7,
                                           6,  8,  9, 10, 11, 13, 12, 14,
                                          15, 16,  4,  5,  6,  7,  8,  9,
                                          10, 11, 12, 13, 14, 15, 16, 17
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 22, with Depth = 12
 */
template<>
struct best_network<22> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0, 14,  1,  8,  2,  4,  3,  5,
                                           6, 11,  7, 21,  9, 12, 10, 15,
                                          13, 20, 16, 18, 17, 19,  0,  7,
                                           1, 13,  2, 17,  3, 16,  4, 19,
                                           5, 18,  6, 10,  8, 20, 11, 15,
                                          14, 21,  0,  1,  3,  6,  4,  9,
                                           5, 10,  7, 13,  8, 14, 11, 16,
                                          12, 17, 15, 18, 20, 21,  0,  3,
                                           1,  8,  2,  4,  7, 11,  9, 12,
                                          10, 14, 13, 20, 17, 19, 18, 21,
                                           1,  6,  2,  7,  3, 17,  4, 18,
                                           5, 11,  8,  9, 10, 16, 12, 13,
                                          14, 19, 15, 20,  0,  2,  3,  7,
                                           4,  6,  5,  8,  9, 11, 10, 12,
                                          13, 16, 14, 18, 15, 17, 19, 21,
                                           1,  4,  3,  5,  6, 13,  7,  9,
                                           8, 15, 12, 14, 16, 18, 17, 20,
                                           1,  2,  4, 10,  6, 12,  7,  8,
                                           9, 15, 11, 17, 13, 14, 19, 20,
                                           1,  3,  2,  5,  6, 10,  8,  9,
                                          11, 15, 12, 13, 16, 19, 18, 20,
                                           2,  3,  4,  8,  5,  7,  6,  9,
                                          10, 11, 12, 15, 13, 17, 14, 16,
                                          18, 19,  4,  5,  6,  7,  8, 10,
                                           9, 12, 11, 13, 14, 15, 16, 17,
                                           3,  4,  5,  6,  7,  8,  9, 10,
                                          11, 12, 13, 14, 15, 16, 17, 18
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 23, with Depth = 12
 */
template<>
struct best_network<23> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                           8,  9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21,  0,  2,
                                           1,  3,  4,  6,  5,  7,  8, 10,
                                           9, 11, 12, 14, 13, 15, 16, 18,
                                          17, 19, 20, 22,  0,  4,  1,  5,
                                           2,  8,  3,  9,  6, 10,  7, 11,
                                          12, 16, 13, 17, 14, 20, 15, 21,
                                          18, 22,  0,  2,  1,  3,  4,  6,
                                           5,  7,  8, 10,  9, 11, 12, 14,
                                          13, 15, 16, 18, 17, 19, 20, 22,
                                           0, 12,  1, 13,  2,  4,  3,  5,
                                           6,  8,  7,  9, 10, 22, 14, 16,
                                          15, 17, 18, 20, 19, 21,  1, 12,
                                           2, 14,  3, 15,  4, 16,  5, 17,
                                           6, 18,  7, 19,  8, 20,  9, 21,
                                          11, 22,  1,  2,  3, 14,  4,  6,
                                           5,  7,  8, 13,  9, 20, 10, 15,
                                          16, 18, 17, 19, 21, 22,  3,  6,
                                           5, 16,  7, 18,  8, 12,  9, 13,
                                          10, 14, 11, 15, 17, 20,  2,  3,
                                           4,  8,  5, 12,  6, 10,  7, 14,
                                           9, 16, 11, 18, 13, 17, 15, 19,
                                          20, 21,  2,  4,  5,  8,  7,  9,
                                          10, 12, 11, 13, 14, 16, 15, 18,
                                          19, 21,  3,  5,  6,  8,  7, 10,
                                           9, 12, 11, 14, 13, 16, 15, 17,
                                          18, 20,  3,  4,  5,  6,  7,  8,
                                           9, 10, 11, 12, 13, 14, 15, 16,
                                          17, 18, 19, 20
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 24, with Depth = 12
 */
template<>
struct best_network<24> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                           8,  9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23,
                                           0,  2,  1,  3,  4,  6,  5,  7,
                                           8, 10,  9, 11, 12, 14, 13, 15,
                                          16, 18, 17, 19, 20, 22, 21, 23,
                                           0,  4,  1,  5,  2,  8,  3,  9,
                                           6, 10,  7, 11, 12, 16, 13, 17,
                                          14, 20, 15, 21, 18, 22, 19, 23,
                                           0,  2,  1,  3,  4,  6,  5,  7,
                                           8, 10,  9, 11, 12, 14, 13, 15,
                                          16, 18, 17, 19, 20, 22, 21, 23,
                                           0, 12,  1, 13,  2,  4,  3,  5,
                                           6,  8,  7,  9, 10, 22, 11, 23,
                                          14, 16, 15, 17, 18, 20, 19, 21,
                                           1, 12,  2, 14,  3, 15,  4, 16,
                                           5, 17,  6, 18,  7, 19,  8, 20,
                                           9, 21, 11, 22,  1,  2,  3, 14,
                                           4,  6,  5,  7,  8, 13,  9, 20,
                                          10, 15, 16, 18, 17, 19, 21, 22,
                                           3,  6,  5, 16,  7, 18,  8, 12,
                                           9, 13, 10, 14, 11, 15, 17, 20,
                                           2,  3,  4,  8,  5, 12,  6, 10,
                                           7, 14,  9, 16, 11, 18, 13, 17,
                                          15, 19, 20, 21,  2,  4,  5,  8,
                                           7,  9, 10, 12, 11, 13, 14, 16,
                                          15, 18, 19, 21,  3,  5,  6,  8,
                                           7, 10,  9, 12, 11, 14, 13, 16,
                                          15, 17, 18, 20,  3,  4,  5,  6,
                                           7,  8,  9, 10, 11, 12, 13, 14,
                                          15, 16, 17, 18, 19, 20
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 25, with Depth = 13
 */
template<>
struct best_network<25> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0, 13,  1,  6,  2,  8,  3, 20,
                                           4,  7,  5, 22,  9, 16, 10, 15,
                                          11, 14, 17, 23, 18, 21, 19, 24,
                                           0,  3,  1, 19,  4, 18,  5, 12,
                                           6, 24,  7, 21,  8, 16,  9, 17,
                                          10, 11, 13, 20, 14, 15,  0, 10,
                                           1,  5,  2, 17,  3, 12,  6, 11,
                                           7, 16,  8, 23,  9, 18, 13, 22,
                                          14, 19, 20, 24,  0,  1,  2,  9,
                                           3, 14,  4,  8,  5, 10,  6, 13,
                                           7, 18, 11, 22, 12, 19, 15, 20,
                                          16, 23, 17, 21,  1,  5,  2,  4,
                                           3,  6,  7,  9,  8, 17, 10, 15,
                                          11, 14, 12, 13, 16, 18, 19, 22,
                                          20, 24, 21, 23,  0,  2,  1,  3,
                                           4,  7,  5,  6,  8, 10,  9, 16,
                                          11, 12, 13, 14, 15, 17, 18, 21,
                                          19, 20, 22, 24,  1,  2,  3,  4,
                                           6, 18,  7, 19,  8, 11,  9, 12,
                                          10, 15, 13, 16, 14, 17, 21, 22,
                                          23, 24,  1,  9,  2, 11,  4,  6,
                                           5,  7, 10, 12, 13, 15, 14, 23,
                                          18, 20, 19, 21,  1,  3,  2,  8,
                                           6, 14,  7, 13,  9, 10, 11, 19,
                                          12, 18, 15, 16, 17, 23, 20, 22,
                                           2,  5,  4,  9,  6, 10,  7,  8,
                                          11, 13, 12, 14, 15, 19, 16, 21,
                                          17, 18, 20, 23,  3,  5,  4,  7,
                                           6, 11,  8,  9, 10, 12, 13, 15,
                                          14, 19, 16, 17, 18, 21, 22, 23,
                                           2,  3,  5,  7,  6,  8,  9, 11,
                                          10, 13, 12, 15, 14, 16, 17, 19,
                                          18, 20,  4,  5,  6,  7,  8,  9,
                                          10, 11, 12, 13, 14, 15, 16, 17,
                                          18, 19, 20, 21
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 26, with Depth = 13
 */
template<>
struct best_network<26> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0, 13,  1,  6,  2,  8,  3, 20,
                                           4,  7,  5, 22,  9, 16, 10, 15,
                                          11, 14, 12, 25, 17, 23, 18, 21,
                                          19, 24,  0,  3,  1, 19,  4, 18,
                                           5, 12,  6, 24,  7, 21,  8, 16,
                                           9, 17, 10, 11, 13, 20, 14, 15,
                                          22, 25,  0, 10,  1,  5,  2, 17,
                                           3, 12,  6, 11,  7, 16,  8, 23,
                                           9, 18, 13, 22, 14, 19, 15, 25,
                                          20, 24,  0,  1,  2,  9,  3, 14,
                                           4,  8,  5, 10,  6, 13,  7, 18,
                                          11, 22, 12, 19, 15, 20, 16, 23,
                                          17, 21, 24, 25,  1,  5,  2,  4,
                                           3,  6,  7,  9,  8, 17, 10, 15,
                                          11, 14, 12, 13, 16, 18, 19, 22,
                                          20, 24, 21, 23,  0,  2,  1,  3,
                                           4,  7,  5,  6,  8, 10,  9, 16,
                                          11, 12, 13, 14, 15, 17, 18, 21,
                                          19, 20, 22, 24, 23, 25,  1,  2,
                                           3,  4,  6, 18,  7, 19,  8, 11,
                                           9, 12, 10, 15, 13, 16, 14, 17,
                                          21, 22, 23, 24,  1,  9,  2, 11,
                                           4,  6,  5,  7, 10, 12, 13, 15,
                                          14, 23, 16, 24, 18, 20, 19, 21,
                                           1,  3,  2,  8,  6, 14,  7, 13,
                                           9, 10, 11, 19, 12, 18, 15, 16,
                                          17, 23, 22, 24,  2,  5,  4,  9,
                                           6, 10,  7,  8, 11, 13, 12, 14,
                                          15, 19, 16, 21, 17, 18, 20, 23,
                                           3,  5,  4,  7,  6, 11,  8,  9,
                                          10, 12, 13, 15, 14, 19, 16, 17,
                                          18, 21, 20, 22,  2,  3,  5,  7,
                                           6,  8,  9, 11, 10, 13, 12, 15,
                                          14, 16, 17, 19, 18, 20, 22, 23,
                                           4,  5,  6,  7,  8,  9, 10, 11,
                                          12, 13, 14, 15, 16, 17, 18, 19,
                                          20, 21
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 27, with Depth = 14
 */
template<>
struct best_network<27> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  9,  1,  6,  2,  4,  3,  7,
                                           5,  8, 11, 16, 12, 15, 13, 23,
                                          14, 24, 17, 18, 19, 20, 21, 26,
                                          22, 25,  0,  1,  3,  5,  4, 10,
                                           6,  9,  7,  8, 11, 13, 12, 21,
                                          14, 17, 15, 18, 16, 25, 19, 22,
                                          20, 23, 24, 26,  1,  3,  2,  5,
                                           4,  7,  8, 10, 11, 19, 12, 14,
                                          13, 22, 15, 24, 16, 20, 17, 21,
                                          18, 26, 23, 25,  0,  4,  1,  2,
                                           3,  7,  5,  9,  6,  8, 11, 12,
                                          13, 15, 14, 19, 16, 17, 18, 23,
                                          20, 21, 22, 24, 25, 26,  0,  1,
                                           2,  6,  4,  5,  7,  8,  9, 10,
                                          12, 14, 13, 16, 15, 19, 17, 20,
                                          18, 22, 21, 24, 23, 25,  0, 11,
                                           2,  4,  3,  6,  5,  7,  8,  9,
                                          12, 13, 14, 16, 15, 22, 17, 19,
                                          18, 20, 21, 23, 24, 25,  1,  2,
                                           3,  4,  5,  6,  7,  8, 13, 14,
                                          15, 16, 17, 18, 19, 20, 21, 22,
                                          23, 24,  1, 12,  2,  3,  4,  5,
                                           6,  7, 15, 17, 16, 18, 19, 21,
                                          20, 22,  2, 13, 14, 15, 16, 17,
                                          18, 19, 20, 21, 22, 23,  3, 14,
                                           4, 15,  5, 16,  6, 17,  7, 18,
                                           8, 19,  9, 20, 10, 21,  8, 11,
                                           9, 12, 10, 13, 14, 22, 15, 23,
                                          16, 24, 17, 25, 18, 26,  4,  8,
                                           5,  9,  6, 10,  7, 14, 11, 15,
                                          12, 16, 13, 17, 18, 22, 19, 23,
                                          20, 24, 21, 25,  2,  4,  3,  5,
                                           6,  8,  7,  9, 10, 11, 12, 14,
                                          13, 15, 16, 18, 17, 19, 20, 22,
                                          21, 23, 24, 26,  1,  2,  3,  4,
                                           5,  6,  7,  8,  9, 10, 11, 12,
                                          13, 14, 15, 16, 17, 18, 19, 20,
                                          21, 22, 23, 24, 25, 26
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 28, with Depth = 14
 */
template<>
struct best_network<28> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                           8,  9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23,
                                          24, 25, 26, 27,  0, 26,  1, 27,
                                           2, 24,  3, 25,  4, 22,  5, 23,
                                           6, 20,  7, 21,  8, 18,  9, 19,
                                          10, 16, 11, 17, 12, 14, 13, 15,
                                           0,  6,  1, 20,  2,  4,  3,  5,
                                           7, 26, 10, 12, 11, 14, 13, 16,
                                          15, 17, 21, 27, 22, 24, 23, 25,
                                           1, 18,  2, 10,  4, 22,  5, 23,
                                           6,  8,  9, 26, 12, 13, 14, 15,
                                          17, 25, 19, 21,  0,  6,  3, 22,
                                           4, 12,  5, 24,  7,  9, 11, 13,
                                          14, 16, 15, 23, 18, 20, 21, 27,
                                           0,  2,  1,  4,  3, 11,  5, 13,
                                           6, 10,  7,  8, 14, 22, 16, 24,
                                          17, 21, 19, 20, 23, 26, 25, 27,
                                           1,  6,  3,  7,  4, 11,  5, 10,
                                           8, 15,  9, 14, 12, 19, 13, 18,
                                          16, 23, 17, 22, 20, 24, 21, 26,
                                           2,  9,  4,  8,  5, 13,  7, 17,
                                          10, 20, 11, 15, 12, 16, 14, 22,
                                          18, 25, 19, 23,  2,  3,  4,  5,
                                           7, 12,  8, 11, 10, 13, 14, 17,
                                          15, 20, 16, 19, 22, 23, 24, 25,
                                           1,  2,  5,  6,  8, 10,  9, 12,
                                          11, 14, 13, 16, 15, 18, 17, 19,
                                          21, 22, 25, 26,  3,  5,  6,  9,
                                           7,  8, 10, 12, 11, 13, 14, 16,
                                          15, 17, 18, 21, 19, 20, 22, 24,
                                           2,  3,  4,  7,  5,  6,  8,  9,
                                          10, 11, 12, 13, 14, 15, 16, 17,
                                          18, 19, 20, 23, 21, 22, 24, 25,
                                           4,  5,  6,  7,  8, 10,  9, 11,
                                          12, 14, 13, 15, 16, 18, 17, 19,
                                          20, 21, 22, 23,  3,  4,  5,  6,
                                           7,  8,  9, 10, 11, 12, 13, 14,
                                          15, 16, 17, 18, 19, 20, 21, 22,
                                          23, 24
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 29, with Depth = 14
 */
template<>
struct best_network<29> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                           8,  9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23,
                                          24, 25, 26, 27,  0,  2,  1,  3,
                                           4,  6,  5,  7,  8, 10,  9, 11,
                                          12, 14, 13, 15, 16, 18, 17, 19,
                                          20, 22, 21, 23, 24, 26, 25, 27,
                                           0,  4,  1,  5,  2,  6,  3,  7,
                                           8, 12,  9, 13, 10, 14, 11, 15,
                                          16, 20, 17, 21, 18, 22, 19, 23,
                                          24, 28,  0,  8,  1,  9,  2, 10,
                                           3, 11,  4, 12,  5, 13,  6, 14,
                                           7, 15, 16, 24, 17, 25, 18, 26,
                                          19, 27, 20, 28,  0, 16,  1,  8,
                                           2,  4,  3, 12,  5, 10,  6,  9,
                                           7, 14, 11, 13, 17, 24, 18, 20,
                                          19, 28, 21, 26, 22, 25, 23, 27,
                                           1,  2,  3,  5,  4,  8,  6, 22,
                                           7, 11,  9, 25, 10, 12, 13, 14,
                                          17, 18, 19, 21, 20, 24, 26, 28,
                                           1, 17,  2, 18,  3, 19,  4, 20,
                                           5, 10,  7, 23,  8, 24, 11, 27,
                                          12, 28, 13, 25, 21, 26,  3, 17,
                                           4, 16,  5, 21,  6, 18,  7,  9,
                                           8, 20, 10, 26, 11, 23, 14, 28,
                                          15, 27, 22, 24,  1,  4,  3,  8,
                                           5, 16,  7, 17,  9, 21, 10, 22,
                                          11, 19, 12, 20, 14, 24, 15, 26,
                                          23, 28,  2,  5,  7,  8,  9, 18,
                                          11, 17, 12, 16, 13, 22, 14, 20,
                                          15, 19, 23, 24,  2,  4,  6, 12,
                                           9, 16, 10, 11, 13, 17, 14, 18,
                                          15, 22, 19, 25, 20, 21,  5,  6,
                                           8, 12,  9, 10, 11, 13, 14, 16,
                                          15, 17, 18, 20, 19, 23, 21, 22,
                                          25, 26,  3,  5,  6,  7,  8,  9,
                                          10, 12, 11, 14, 13, 16, 15, 18,
                                          17, 20, 19, 21, 22, 23, 24, 25,
                                          26, 28,  3,  4,  5,  6,  7,  8,
                                           9, 10, 11, 12, 13, 14, 15, 16,
                                          17, 18, 19, 20, 21, 22, 23, 24,
                                          25, 26, 27, 28
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 30, with Depth = 14
 */
template<>
struct best_network<30> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                           8,  9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23,
                                          24, 25, 26, 27, 28, 29,  0,  2,
                                           1,  3,  4,  6,  5,  7,  8, 10,
                                           9, 11, 12, 14, 13, 15, 16, 18,
                                          17, 19, 20, 22, 21, 23, 24, 26,
                                          25, 27,  0,  4,  1,  5,  2,  6,
                                           3,  7,  8, 12,  9, 13, 10, 14,
                                          11, 15, 16, 20, 17, 21, 18, 22,
                                          19, 23, 24, 28, 25, 29,  0,  8,
                                           1,  9,  2, 10,  3, 11,  4, 12,
                                           5, 13,  6, 14,  7, 15, 16, 24,
                                          17, 25, 18, 26, 19, 27, 20, 28,
                                          21, 29,  0, 16,  1,  8,  2,  4,
                                           3, 12,  5, 10,  6,  9,  7, 14,
                                          11, 13, 17, 24, 18, 20, 19, 28,
                                          21, 26, 22, 25, 27, 29,  1,  2,
                                           3,  5,  4,  8,  6, 22,  7, 11,
                                           9, 25, 10, 12, 13, 14, 17, 18,
                                          19, 21, 20, 24, 23, 27, 26, 28,
                                           1, 17,  2, 18,  3, 19,  4, 20,
                                           5, 10,  7, 23,  8, 24, 11, 27,
                                          12, 28, 13, 29, 21, 26,  3, 17,
                                           4, 16,  5, 21,  6, 18,  7,  9,
                                           8, 20, 10, 26, 11, 23, 13, 25,
                                          14, 28, 15, 27, 22, 24,  1,  4,
                                           3,  8,  5, 16,  7, 17,  9, 21,
                                          10, 22, 11, 19, 12, 20, 14, 24,
                                          15, 26, 23, 28,  2,  5,  7,  8,
                                           9, 18, 11, 17, 12, 16, 13, 22,
                                          14, 20, 15, 19, 23, 24, 26, 29,
                                           2,  4,  6, 12,  9, 16, 10, 11,
                                          13, 17, 14, 18, 15, 22, 19, 25,
                                          20, 21, 27, 29,  5,  6,  8, 12,
                                           9, 10, 11, 13, 14, 16, 15, 17,
                                          18, 20, 19, 23, 21, 22, 25, 26,
                                           3,  5,  6,  7,  8,  9, 10, 12,
                                          11, 14, 13, 16, 15, 18, 17, 20,
                                          19, 21, 22, 23, 24, 25, 26, 28,
                                           3,  4,  5,  6,  7,  8,  9, 10,
                                          11, 12, 13, 14, 15, 16, 17, 18,
                                          19, 20, 21, 22, 23, 24, 25, 26,
                                          27, 28
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 31, with Depth = 14
 */
template<>
struct best_network<31> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                           8,  9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23,
                                          24, 25, 26, 27, 28, 29,  0,  2,
                                           1,  3,  4,  6,  5,  7,  8, 10,
                                           9, 11, 12, 14, 13, 15, 16, 18,
                                          17, 19, 20, 22, 21, 23, 24, 26,
                                          25, 27, 28, 30,  0,  4,  1,  5,
                                           2,  6,  3,  7,  8, 12,  9, 13,
                                          10, 14, 11, 15, 16, 20, 17, 21,
                                          18, 22, 19, 23, 24, 28, 25, 29,
                                          26, 30,  0,  8,  1,  9,  2, 10,
                                           3, 11,  4, 12,  5, 13,  6, 14,
                                           7, 15, 16, 24, 17, 25, 18, 26,
                                          19, 27, 20, 28, 21, 29, 22, 30,
                                           0, 16,  1,  8,  2,  4,  3, 12,
                                           5, 10,  6,  9,  7, 14, 11, 13,
                                          17, 24, 18, 20, 19, 28, 21, 26,
                                          22, 25, 23, 30, 27, 29,  1,  2,
                                           3,  5,  4,  8,  6, 22,  7, 11,
                                           9, 25, 10, 12, 13, 14, 17, 18,
                                          19, 21, 20, 24, 23, 27, 26, 28,
                                          29, 30,  1, 17,  2, 18,  3, 19,
                                           4, 20,  5, 10,  7, 23,  8, 24,
                                          11, 27, 12, 28, 13, 29, 14, 30,
                                          21, 26,  3, 17,  4, 16,  5, 21,
                                           6, 18,  7,  9,  8, 20, 10, 26,
                                          11, 23, 13, 25, 14, 28, 15, 27,
                                          22, 24,  1,  4,  3,  8,  5, 16,
                                           7, 17,  9, 21, 10, 22, 11, 19,
                                          12, 20, 14, 24, 15, 26, 23, 28,
                                          27, 30,  2,  5,  7,  8,  9, 18,
                                          11, 17, 12, 16, 13, 22, 14, 20,
                                          15, 19, 23, 24, 26, 29,  2,  4,
                                           6, 12,  9, 16, 10, 11, 13, 17,
                                          14, 18, 15, 22, 19, 25, 20, 21,
                                          27, 29,  5,  6,  8, 12,  9, 10,
                                          11, 13, 14, 16, 15, 17, 18, 20,
                                          19, 23, 21, 22, 25, 26,  3,  5,
                                           6,  7,  8,  9, 10, 12, 11, 14,
                                          13, 16, 15, 18, 17, 20, 19, 21,
                                          22, 23, 24, 25, 26, 28,  3,  4,
                                           5,  6,  7,  8,  9, 10, 11, 12,
                                          13, 14, 15, 16, 17, 18, 19, 20,
                                          21, 22, 23, 24, 25, 26, 27, 28
                                          // clang-format on
                                          >;
};

/*
 * Sorting Network For N = 32, with Depth = 14
 */
template<>
struct best_network<32> {
    using network = std::integer_sequence<uint32_t,
                                          // clang-format off
                                           0,  1,  2,  3,  4,  5,  6,  7,
                                           8,  9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23,
                                          24, 25, 26, 27, 28, 29, 30, 31,
                                           0,  2,  1,  3,  4,  6,  5,  7,
                                           8, 10,  9, 11, 12, 14, 13, 15,
                                          16, 18, 17, 19, 20, 22, 21, 23,
                                          24, 26, 25, 27, 28, 30, 29, 31,
                                           0,  4,  1,  5,  2,  6,  3,  7,
                                           8, 12,  9, 13, 10, 14, 11, 15,
                                          16, 20, 17, 21, 18, 22, 19, 23,
                                          24, 28, 25, 29, 26, 30, 27, 31,
                                           0,  8,  1,  9,  2, 10,  3, 11,
                                           4, 12,  5, 13,  6, 14,  7, 15,
                                          16, 24, 17, 25, 18, 26, 19, 27,
                                          20, 28, 21, 29, 22, 30, 23, 31,
                                           0, 16,  1,  8,  2,  4,  3, 12,
                                           5, 10,  6,  9,  7, 14, 11, 13,
                                          15, 31, 17, 24, 18, 20, 19, 28,
                                          21, 26, 22, 25, 23, 30, 27, 29,
                                           1,  2,  3,  5,  4,  8,  6, 22,
                                           7, 11,  9, 25, 10, 12, 13, 14,
                                          17, 18, 19, 21, 20, 24, 23, 27,
                                          26, 28, 29, 30,  1, 17,  2, 18,
                                           3, 19,  4, 20,  5, 10,  7, 23,
                                           8, 24, 11, 27, 12, 28, 13, 29,
                                          14, 30, 21, 26,  3, 17,  4, 16,
                                           5, 21,  6, 18,  7,  9,  8, 20,
                                          10, 26, 11, 23, 13, 25, 14, 28,
                                          15, 27, 22, 24,  1,  4,  3,  8,
                                           5, 16,  7, 17,  9, 21, 10, 22,
                                          11, 19, 12, 20, 14, 24, 15, 26,
                                          23, 28, 27, 30,  2,  5,  7,  8,
                                           9, 18, 11, 17, 12, 16, 13, 22,
                                          14, 20, 15, 19, 23, 24, 26, 29,
                                           2,  4,  6, 12,  9, 16, 10, 11,
                                          13, 17, 14, 18, 15, 22, 19, 25,
                                          20, 21, 27, 29,  5,  6,  8, 12,
                                           9, 10, 11, 13, 14, 16, 15, 17,
                                          18, 20, 19, 23, 21, 22, 25, 26,
                                           3,  5,  6,  7,  8,  9, 10, 12,
                                          11, 14, 13, 16, 15, 18, 17, 20,
                                          19, 21, 22, 23, 24, 25, 26, 28,
                                           3,  4,  5,  6,  7,  8,  9, 10,
                                          11, 12, 13, 14, 15, 16, 17, 18,
                                          19, 20, 21, 22, 23, 24, 25, 26,
                                          27, 28
                                          // clang-format on
                                          >;
};

}  // namespace internal
}  // namespace network
}  // namespace vsort

#endif
